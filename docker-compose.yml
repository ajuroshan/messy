services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/code
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["gunicorn", "-b", "0.0.0.0:8000", "messy.wsgi:application"]
    restart: unless-stopped
    networks:
      - nginx_network

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "messy", "worker", "-l", "info"]
    restart: unless-stopped
    networks:
      - nginx_network

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    command: ["celery", "-A", "messy", "beat", "-l", "info"]
    restart: unless-stopped
    networks:
      - nginx_network

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    networks:
      - nginx_network

  db:
    image: postgres:17
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nginx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    restart: unless-stopped
    env_file: .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/code/static
      - ./media:/code/media
      - ./nginx/secure/:/etc/nginx/templates/
      - /etc/localtime:/etc/localtime:ro
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/99-autoreload.sh:/docker-entrypoint.d/99-autoreload.sh
    depends_on:
      web:
        condition: service_started
    networks:
      - nginx_network

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: >
      /bin/sh -c 'trap exit TERM; while :; do
      certbot renew; sleep 12h & wait $${!}; done;'

  metabase:
    image: metabase/metabase
    container_name: metabase
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ./metabase-data:/metabase-data
    environment:
      - MB_DB_FILE=/metabase-data/metabase.db
    networks:
      - nginx_network

networks:
  nginx_network:

volumes:
  postgres_data:
  redis_data:
